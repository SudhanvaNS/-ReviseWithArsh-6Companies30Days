class Solution {
public:
int convert(string symbol){
    int i=0;
    int ans=0;
    if(symbol[0]=='-'){
        i++;
        while(i<symbol.size()){
            int digit=symbol[i]-'0';
            ans=(ans*10)-digit;
            i++;
        }
    }else{ 
        while(i<symbol.size()){
        int digit=symbol[i]-'0';
         ans=(ans*10)+digit;
        i++;
        }
    }
    
    return ans;
}
    int compute(int a,int b, char ch){
        switch(ch){
            case '+': return a+b;
            case '-': return a-b;
            case '*': return a*b;
            case '/': if(b==0)
                        return -1;
                        else
                        return a/b;
        }
        return -1;
    }
    int evalRPN(vector<string>& tokens) {
        stack<int> s;
        for(int i=0;i<tokens.size();i++){
            string symbol=tokens[i];
                if(tokens[i].size() == 1 and tokens[i][0] < 48){
                    int a=s.top();
                    s.pop();
                    int b=s.top();
                    s.pop();
                  
                    int ans=compute(b,a,symbol[0]);
                    
                    s.push(ans);
                    
                }else{
                   int digit=convert(symbol);
                    s.push(digit);
                }
            
        }
        return s.top();
    }
};